package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import domain.Gabinet;


public class GabinetManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableGabinet = 
			"CREATE TABLE Gabinet(id bigint GENERATED BY DEFAULT AS IDENTITY, numer varchar(5), pietro varchar(10), lekarz varchar(30)"
			+ "badanie integer, FOREIGN KEY (badanie) REFERENCES PUBLIC.BADANIE(id) ON DELETE CASCADE ON UPDATE CASCADE)";
	
	private String dropTableGabinet = "DROP TABLE Gabinet";
			
	private PreparedStatement addGabinetStmt;
	private PreparedStatement editGabinetStmt;
	private PreparedStatement deleteGabinetStmt;
	private PreparedStatement deleteAllGabinetyStmt;
	private PreparedStatement getAllGabinetyStmt;
	private PreparedStatement getGabinetStmt;

	private Statement statement;
	
	
	public GabinetManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Gabinet".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
			{
				statement.executeUpdate(createTableGabinet);
			}
			

			addGabinetStmt = connection
					.prepareStatement("INSERT INTO Gabinet (numer, pietro, lekarz, badanie) VALUES (?, ?, ?, ?)");
			editGabinetStmt = connection
					.prepareStatement("UPDATE Gabinet SET numer=?, pietro=?, lekarz=?, badanie=?");
			deleteGabinetStmt = connection
					.prepareStatement("DELETE FROM Gabinet where id=?");
			deleteAllGabinetyStmt = connection
					.prepareStatement("DELETE FROM Gabinet");
			getAllGabinetyStmt = connection
					.prepareStatement("SELECT id, numer, pietro, lekarz, badanie FROM Gabinet");
			getGabinetStmt = connection
					.prepareStatement("SELECT id, numer, pietro, lekarz, badanie FROM Gabinet where id=?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	
	
	public Connection getConnection() {
		return connection;
	}
	
	
	
	public int addGabinet(Gabinet Gabinet) {
		int count = 0;
		
		try {
			addGabinetStmt.setString(1, Gabinet.getNumer());
			addGabinetStmt.setString(2, Gabinet.getPietro());
			addGabinetStmt.setString(3, Gabinet.getLekarz());
			addGabinetStmt.setInt(4, Gabinet.getBadanieFK());
			
			count = addGabinetStmt.executeUpdate();
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	
	public int editGabinet(Gabinet Gabinet) {
		int count = 0;
		
		try {
			addGabinetStmt.setString(1, Gabinet.getNumer());
			addGabinetStmt.setString(2, Gabinet.getPietro());
			addGabinetStmt.setString(3, Gabinet.getLekarz());
			addGabinetStmt.setInt(4, Gabinet.getBadanieFK());
			
			count = editGabinetStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	
	public int deleteGabinet(long id) {
		int count = 0;
		try {
			deleteGabinetStmt.setLong(1, id);
			count = deleteGabinetStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	
	public void deleteAllGabinety() {
		try {
			deleteAllGabinetyStmt.executeUpdate();
			
			statement.executeUpdate(dropTableGabinet);
			statement.executeUpdate(createTableGabinet);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	public List<Gabinet> getAllGabinety() {
		List<Gabinet> Gabinety = new ArrayList<Gabinet>();

		try {
			ResultSet rs = getAllGabinetyStmt.executeQuery();

			while (rs.next()) {
				Gabinet g = new Gabinet();
				g.setId(rs.getInt("id"));
				g.setNumer(rs.getString("numer"));
				g.setPietro(rs.getString("pietro"));
				g.setLekarz(rs.getString("lekarz"));
				g.setBadanieFK(rs.getInt("badanie"));
				Gabinety.add(g);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Gabinety;
	}
	
	
	
	public Gabinet getGabinet(long id) {
		Gabinet g = new Gabinet();

		try {
			getGabinetStmt.setLong(1, id);
			ResultSet rs = getGabinetStmt.executeQuery();
			while (rs.next()) {
				
				g.setId(rs.getInt("id"));
				g.setNumer(rs.getString("numer"));
				g.setPietro(rs.getString("pietro"));
				g.setLekarz(rs.getString("lekarz"));
				g.setBadanieFK(rs.getInt("badanie"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return g;
	}
	
	
}
